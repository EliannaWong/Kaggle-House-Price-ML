{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "okBPxLGH64sq",
    "outputId": "0b7c49f0-6bc3-42c1-b3b0-1aed38ab33ab"
   },
   "outputs": [],
   "source": [
    "from google.colab import drive\n",
    "drive.mount('/content/gdrive')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "zZXNBj1M7I-V",
    "outputId": "8c84bf2e-be5b-40bb-87f8-3375fc81015e"
   },
   "outputs": [],
   "source": [
    "%cd /content/gdrive/My Drive/Elianna/HousePrice_Kaggle/Kaggle-House-Price-ML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "AXB_RFlDxQO2"
   },
   "outputs": [],
   "source": [
    "#libraries we need\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from datetime import datetime\n",
    "from datetime import date\n",
    "pd.options.mode.chained_assignment = None\n",
    "import h2o"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "aLul8mINxQO6"
   },
   "outputs": [],
   "source": [
    "train = pd.read_csv('./house-prices-data/train.csv') \n",
    "test = pd.read_csv('./house-prices-data/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "E6Rty8nGxQO8"
   },
   "outputs": [],
   "source": [
    "# Drop the id column\n",
    "train.drop(['Id'],axis=1, inplace=True)\n",
    "test.drop(['Id'],axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 51
    },
    "colab_type": "code",
    "id": "dNb5HylVNY8a",
    "outputId": "f8d8da4a-a75f-4fce-d7e7-f506dec7c3b8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The shape of train data is (1460, 80)\n",
      "The shape of test data is (1459, 79)\n"
     ]
    }
   ],
   "source": [
    "print('The shape of train data is {}'.format(train.shape))\n",
    "print('The shape of test data is {}'.format(test.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "In_ic8JFxQO_"
   },
   "outputs": [],
   "source": [
    "full = train.append(test, ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "QEEw-NBENX8Q",
    "outputId": "e6fc2eef-4817-4bf1-a572-249fb39c9bcd"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The shape of full data is (2919, 80)\n"
     ]
    }
   ],
   "source": [
    "print('The shape of full data is {}'.format(full.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 224
    },
    "colab_type": "code",
    "id": "c7gbgcC9xQPG",
    "outputId": "a50010e4-94fa-471d-d5f9-88fe27ed33d2"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1stFlrSF</th>\n",
       "      <th>2ndFlrSF</th>\n",
       "      <th>3SsnPorch</th>\n",
       "      <th>Alley</th>\n",
       "      <th>BedroomAbvGr</th>\n",
       "      <th>BldgType</th>\n",
       "      <th>BsmtCond</th>\n",
       "      <th>BsmtExposure</th>\n",
       "      <th>BsmtFinSF1</th>\n",
       "      <th>BsmtFinSF2</th>\n",
       "      <th>...</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>Street</th>\n",
       "      <th>TotRmsAbvGrd</th>\n",
       "      <th>TotalBsmtSF</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>YearRemodAdd</th>\n",
       "      <th>YrSold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>856</td>\n",
       "      <td>854</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>TA</td>\n",
       "      <td>No</td>\n",
       "      <td>706.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>WD</td>\n",
       "      <td>0</td>\n",
       "      <td>Pave</td>\n",
       "      <td>8</td>\n",
       "      <td>856.0</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>0</td>\n",
       "      <td>2003</td>\n",
       "      <td>2003</td>\n",
       "      <td>2008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1262</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>TA</td>\n",
       "      <td>Gd</td>\n",
       "      <td>978.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>WD</td>\n",
       "      <td>0</td>\n",
       "      <td>Pave</td>\n",
       "      <td>6</td>\n",
       "      <td>1262.0</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>298</td>\n",
       "      <td>1976</td>\n",
       "      <td>1976</td>\n",
       "      <td>2007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>920</td>\n",
       "      <td>866</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>TA</td>\n",
       "      <td>Mn</td>\n",
       "      <td>486.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>WD</td>\n",
       "      <td>0</td>\n",
       "      <td>Pave</td>\n",
       "      <td>6</td>\n",
       "      <td>920.0</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>0</td>\n",
       "      <td>2001</td>\n",
       "      <td>2002</td>\n",
       "      <td>2008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>961</td>\n",
       "      <td>756</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>Gd</td>\n",
       "      <td>No</td>\n",
       "      <td>216.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>WD</td>\n",
       "      <td>0</td>\n",
       "      <td>Pave</td>\n",
       "      <td>7</td>\n",
       "      <td>756.0</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>0</td>\n",
       "      <td>1915</td>\n",
       "      <td>1970</td>\n",
       "      <td>2006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1145</td>\n",
       "      <td>1053</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>1Fam</td>\n",
       "      <td>TA</td>\n",
       "      <td>Av</td>\n",
       "      <td>655.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>WD</td>\n",
       "      <td>0</td>\n",
       "      <td>Pave</td>\n",
       "      <td>9</td>\n",
       "      <td>1145.0</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>192</td>\n",
       "      <td>2000</td>\n",
       "      <td>2000</td>\n",
       "      <td>2008</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 80 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   1stFlrSF  2ndFlrSF  3SsnPorch Alley  BedroomAbvGr BldgType BsmtCond  \\\n",
       "0       856       854          0   NaN             3     1Fam       TA   \n",
       "1      1262         0          0   NaN             3     1Fam       TA   \n",
       "2       920       866          0   NaN             3     1Fam       TA   \n",
       "3       961       756          0   NaN             3     1Fam       Gd   \n",
       "4      1145      1053          0   NaN             4     1Fam       TA   \n",
       "\n",
       "  BsmtExposure  BsmtFinSF1  BsmtFinSF2  ...   SaleType ScreenPorch  Street  \\\n",
       "0           No       706.0         0.0  ...         WD           0    Pave   \n",
       "1           Gd       978.0         0.0  ...         WD           0    Pave   \n",
       "2           Mn       486.0         0.0  ...         WD           0    Pave   \n",
       "3           No       216.0         0.0  ...         WD           0    Pave   \n",
       "4           Av       655.0         0.0  ...         WD           0    Pave   \n",
       "\n",
       "   TotRmsAbvGrd TotalBsmtSF  Utilities WoodDeckSF YearBuilt YearRemodAdd  \\\n",
       "0             8       856.0     AllPub          0      2003         2003   \n",
       "1             6      1262.0     AllPub        298      1976         1976   \n",
       "2             6       920.0     AllPub          0      2001         2002   \n",
       "3             7       756.0     AllPub          0      1915         1970   \n",
       "4             9      1145.0     AllPub        192      2000         2000   \n",
       "\n",
       "  YrSold  \n",
       "0   2008  \n",
       "1   2007  \n",
       "2   2008  \n",
       "3   2006  \n",
       "4   2008  \n",
       "\n",
       "[5 rows x 80 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "full.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "46OnypFrxQPI"
   },
   "source": [
    "### Cleaning Data Set\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 402
    },
    "colab_type": "code",
    "id": "1LTAXPfExQPJ",
    "outputId": "fa747390-2d88-4953-d095-6779418751ea"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fa76d00fba8>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fa76cebef28>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.DataFrame(train.isna().sum()*100/train.shape[0]).plot.bar(figsize=(20,5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Jy2EwsUoxQPM"
   },
   "source": [
    "* For the variables with huge proportion of missing value: Alley, PoolQC, Fence and MiscFeature, it's proper to replace NA value with None. Since None is also a type\n",
    "* Replaced null values with None in the FireplaceQu column both in test and training set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "3uBya35UXo-9"
   },
   "outputs": [],
   "source": [
    "# Get columns to fill missing column with Null\n",
    "columns_fill_null = full.columns[full.isnull().any(axis = 0)].drop(['LotFrontage', 'SalePrice', \"MasVnrArea\", \"GarageYrBlt\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "2MKD8m7OYPAj"
   },
   "outputs": [],
   "source": [
    "full[columns_fill_null] = full[columns_fill_null].fillna(\"None\")\n",
    "full['MasVnrArea'] = full['MasVnrArea'].fillna(0)\n",
    "full['GarageYrBlt'] = full['GarageYrBlt'].fillna(full['YearBuilt'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "jP81WpxMZQKJ"
   },
   "outputs": [],
   "source": [
    "train = full[full['SalePrice'].notnull()]\n",
    "test = full[full['SalePrice'].isnull()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "qgTVEFIKF0eg",
    "outputId": "15d21784-dd33-45b7-c3a3-07a275cd7b3b"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9305840449585167"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get train LotFrontage dummy variables\n",
    "LotFrontage_Dummies_df = pd.get_dummies(train[['LotFrontage', 'MSZoning', 'LotArea', 'LotConfig', 'Neighborhood']])\n",
    "\n",
    "# Get full dummy variables\n",
    "# Split the data into LotFrontage known and LotFrontage unknown\n",
    "LotFrontageKnown = LotFrontage_Dummies_df[LotFrontage_Dummies_df[\"LotFrontage\"].notnull()]\n",
    "LotFrontageUnknown = LotFrontage_Dummies_df[LotFrontage_Dummies_df[\"LotFrontage\"].isnull()]\n",
    "\n",
    "# Training data knowing LotFrontage\n",
    "LotFrontage_Known_X = LotFrontageKnown.drop([\"LotFrontage\"], axis = 1)\n",
    "LotFrontage_Known_y = LotFrontageKnown[\"LotFrontage\"]\n",
    "# Training data unknown LotFrontage\n",
    "LotFrontage_Unknown_X = LotFrontageUnknown.drop([\"LotFrontage\"], axis = 1)\n",
    "# Build model using random forest\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "rfr=RandomForestRegressor(random_state=1,n_estimators=500,n_jobs=-1)\n",
    "rfr.fit(LotFrontage_Known_X, LotFrontage_Known_y)\n",
    "rfr.score(LotFrontage_Known_X, LotFrontage_Known_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "k8HAnb4oHYx8"
   },
   "outputs": [],
   "source": [
    "# Predict training data unknown LotFrontage\n",
    "LotFrontage_Unknown_y = rfr.predict(LotFrontage_Unknown_X)\n",
    "train.loc[train[\"LotFrontage\"].isnull(), \"LotFrontage\"] = LotFrontage_Unknown_y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "I-013Z4KPZJZ",
    "outputId": "fef37e73-f762-4a30-e212-238831c7905e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9453821292425812"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Repeat same process for test data\n",
    "# Get train LotFrontage dummy variables\n",
    "LotFrontage_Dummies_df = pd.get_dummies(test[['LotFrontage', 'MSZoning', 'LotArea', 'LotConfig', 'Neighborhood']])\n",
    "\n",
    "# Get full dummy variables\n",
    "# Split the data into LotFrontage known and LotFrontage unknown\n",
    "LotFrontageKnown = LotFrontage_Dummies_df[LotFrontage_Dummies_df[\"LotFrontage\"].notnull()]\n",
    "LotFrontageUnknown = LotFrontage_Dummies_df[LotFrontage_Dummies_df[\"LotFrontage\"].isnull()]\n",
    "\n",
    "# Testing data knowing LotFrontage\n",
    "LotFrontage_Known_X = LotFrontageKnown.drop([\"LotFrontage\"], axis = 1)\n",
    "LotFrontage_Known_y = LotFrontageKnown[\"LotFrontage\"]\n",
    "# Testing data unknown LotFrontage\n",
    "LotFrontage_Unknown_X = LotFrontageUnknown.drop([\"LotFrontage\"], axis = 1)\n",
    "# Build model using random forest\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "rfr=RandomForestRegressor(random_state=1,n_estimators=500,n_jobs=-1)\n",
    "rfr.fit(LotFrontage_Known_X, LotFrontage_Known_y)\n",
    "rfr.score(LotFrontage_Known_X, LotFrontage_Known_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "UYAeci5RCb3c"
   },
   "outputs": [],
   "source": [
    "# Predict testing data unknown LotFrontage\n",
    "LotFrontage_Unknown_y = rfr.predict(LotFrontage_Unknown_X)\n",
    "test.loc[test[\"LotFrontage\"].isnull(), \"LotFrontage\"] = LotFrontage_Unknown_y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Jrx9NR22xQPR"
   },
   "source": [
    "## h2o libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checking whether there is an H2O instance running at http://localhost:54321 ..... not found.\n",
      "Attempting to start a local H2O server...\n",
      "  Java Version: openjdk version \"1.8.0_152-release\"; OpenJDK Runtime Environment (build 1.8.0_152-release-1056-b12); OpenJDK 64-Bit Server VM (build 25.152-b12, mixed mode)\n",
      "  Starting server from /Users/vibhz/anaconda3/lib/python3.6/site-packages/h2o/backend/bin/h2o.jar\n",
      "  Ice root: /var/folders/7j/xkpg12v52m9dbd2qlw0lv1tw0000gn/T/tmpnf4pr3jv\n",
      "  JVM stdout: /var/folders/7j/xkpg12v52m9dbd2qlw0lv1tw0000gn/T/tmpnf4pr3jv/h2o_vibhz_started_from_python.out\n",
      "  JVM stderr: /var/folders/7j/xkpg12v52m9dbd2qlw0lv1tw0000gn/T/tmpnf4pr3jv/h2o_vibhz_started_from_python.err\n",
      "  Server is running at http://127.0.0.1:54321\n",
      "Connecting to H2O server at http://127.0.0.1:54321 ... successful.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div style=\"overflow:auto\"><table style=\"width:50%\"><tr><td>H2O_cluster_uptime:</td>\n",
       "<td>02 secs</td></tr>\n",
       "<tr><td>H2O_cluster_timezone:</td>\n",
       "<td>America/Los_Angeles</td></tr>\n",
       "<tr><td>H2O_data_parsing_timezone:</td>\n",
       "<td>UTC</td></tr>\n",
       "<tr><td>H2O_cluster_version:</td>\n",
       "<td>3.30.0.5</td></tr>\n",
       "<tr><td>H2O_cluster_version_age:</td>\n",
       "<td>3 days </td></tr>\n",
       "<tr><td>H2O_cluster_name:</td>\n",
       "<td>H2O_from_python_vibhz_c08o5s</td></tr>\n",
       "<tr><td>H2O_cluster_total_nodes:</td>\n",
       "<td>1</td></tr>\n",
       "<tr><td>H2O_cluster_free_memory:</td>\n",
       "<td>21.33 Gb</td></tr>\n",
       "<tr><td>H2O_cluster_total_cores:</td>\n",
       "<td>8</td></tr>\n",
       "<tr><td>H2O_cluster_allowed_cores:</td>\n",
       "<td>4</td></tr>\n",
       "<tr><td>H2O_cluster_status:</td>\n",
       "<td>accepting new members, healthy</td></tr>\n",
       "<tr><td>H2O_connection_url:</td>\n",
       "<td>http://127.0.0.1:54321</td></tr>\n",
       "<tr><td>H2O_connection_proxy:</td>\n",
       "<td>{\"http\": null, \"https\": null}</td></tr>\n",
       "<tr><td>H2O_internal_security:</td>\n",
       "<td>False</td></tr>\n",
       "<tr><td>H2O_API_Extensions:</td>\n",
       "<td>Amazon S3, XGBoost, Algos, AutoML, Core V3, TargetEncoder, Core V4</td></tr>\n",
       "<tr><td>Python_version:</td>\n",
       "<td>3.6.4 final</td></tr></table></div>"
      ],
      "text/plain": [
       "--------------------------  ------------------------------------------------------------------\n",
       "H2O_cluster_uptime:         02 secs\n",
       "H2O_cluster_timezone:       America/Los_Angeles\n",
       "H2O_data_parsing_timezone:  UTC\n",
       "H2O_cluster_version:        3.30.0.5\n",
       "H2O_cluster_version_age:    3 days\n",
       "H2O_cluster_name:           H2O_from_python_vibhz_c08o5s\n",
       "H2O_cluster_total_nodes:    1\n",
       "H2O_cluster_free_memory:    21.33 Gb\n",
       "H2O_cluster_total_cores:    8\n",
       "H2O_cluster_allowed_cores:  4\n",
       "H2O_cluster_status:         accepting new members, healthy\n",
       "H2O_connection_url:         http://127.0.0.1:54321\n",
       "H2O_connection_proxy:       {\"http\": null, \"https\": null}\n",
       "H2O_internal_security:      False\n",
       "H2O_API_Extensions:         Amazon S3, XGBoost, Algos, AutoML, Core V3, TargetEncoder, Core V4\n",
       "Python_version:             3.6.4 final\n",
       "--------------------------  ------------------------------------------------------------------"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "SEED                    = 12345   # global random seed for better reproducibility\n",
    "GLM_SELECTION_THRESHOLD = 0.001   # threshold above which a GLM coefficient is considered \"selected\"\n",
    "\n",
    "np.random.seed(SEED)                     # set random seed for better reproducibility\n",
    "\n",
    "h2o.init(max_mem_size='24G', nthreads=4) # start h2o with plenty of memory and threads\n",
    "h2o.remove_all()                         # clears h2o memory\n",
    "h2o.no_progress()                        # turn off h2o progress indicators  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_name = 'SalePrice'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['1stFlrSF',\n",
       " '2ndFlrSF',\n",
       " '3SsnPorch',\n",
       " 'Alley',\n",
       " 'BedroomAbvGr',\n",
       " 'BldgType',\n",
       " 'BsmtCond',\n",
       " 'BsmtExposure',\n",
       " 'BsmtFinSF1',\n",
       " 'BsmtFinSF2',\n",
       " 'BsmtFinType1',\n",
       " 'BsmtFinType2',\n",
       " 'BsmtFullBath',\n",
       " 'BsmtHalfBath',\n",
       " 'BsmtQual',\n",
       " 'BsmtUnfSF',\n",
       " 'CentralAir',\n",
       " 'Condition1',\n",
       " 'Condition2',\n",
       " 'Electrical',\n",
       " 'EnclosedPorch',\n",
       " 'ExterCond',\n",
       " 'ExterQual',\n",
       " 'Exterior1st',\n",
       " 'Exterior2nd',\n",
       " 'Fence',\n",
       " 'FireplaceQu',\n",
       " 'Fireplaces',\n",
       " 'Foundation',\n",
       " 'FullBath',\n",
       " 'Functional',\n",
       " 'GarageArea',\n",
       " 'GarageCars',\n",
       " 'GarageCond',\n",
       " 'GarageFinish',\n",
       " 'GarageQual',\n",
       " 'GarageType',\n",
       " 'GarageYrBlt',\n",
       " 'GrLivArea',\n",
       " 'HalfBath',\n",
       " 'Heating',\n",
       " 'HeatingQC',\n",
       " 'HouseStyle',\n",
       " 'KitchenAbvGr',\n",
       " 'KitchenQual',\n",
       " 'LandContour',\n",
       " 'LandSlope',\n",
       " 'LotArea',\n",
       " 'LotConfig',\n",
       " 'LotFrontage',\n",
       " 'LotShape',\n",
       " 'LowQualFinSF',\n",
       " 'MSSubClass',\n",
       " 'MSZoning',\n",
       " 'MasVnrArea',\n",
       " 'MasVnrType',\n",
       " 'MiscFeature',\n",
       " 'MiscVal',\n",
       " 'MoSold',\n",
       " 'Neighborhood',\n",
       " 'OpenPorchSF',\n",
       " 'OverallCond',\n",
       " 'OverallQual',\n",
       " 'PavedDrive',\n",
       " 'PoolArea',\n",
       " 'PoolQC',\n",
       " 'RoofMatl',\n",
       " 'RoofStyle',\n",
       " 'SaleCondition',\n",
       " 'SaleType',\n",
       " 'ScreenPorch',\n",
       " 'Street',\n",
       " 'TotRmsAbvGrd',\n",
       " 'TotalBsmtSF',\n",
       " 'Utilities',\n",
       " 'WoodDeckSF',\n",
       " 'YearBuilt',\n",
       " 'YearRemodAdd',\n",
       " 'YrSold']"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_names = list(train.columns.values)\n",
    "x_names.remove('SalePrice')\n",
    "x_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checking whether there is an H2O instance running at http://localhost:54321 . connected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div style=\"overflow:auto\"><table style=\"width:50%\"><tr><td>H2O_cluster_uptime:</td>\n",
       "<td>16 mins 15 secs</td></tr>\n",
       "<tr><td>H2O_cluster_timezone:</td>\n",
       "<td>America/Los_Angeles</td></tr>\n",
       "<tr><td>H2O_data_parsing_timezone:</td>\n",
       "<td>UTC</td></tr>\n",
       "<tr><td>H2O_cluster_version:</td>\n",
       "<td>3.30.0.5</td></tr>\n",
       "<tr><td>H2O_cluster_version_age:</td>\n",
       "<td>3 days </td></tr>\n",
       "<tr><td>H2O_cluster_name:</td>\n",
       "<td>H2O_from_python_vibhz_c08o5s</td></tr>\n",
       "<tr><td>H2O_cluster_total_nodes:</td>\n",
       "<td>1</td></tr>\n",
       "<tr><td>H2O_cluster_free_memory:</td>\n",
       "<td>21.31 Gb</td></tr>\n",
       "<tr><td>H2O_cluster_total_cores:</td>\n",
       "<td>8</td></tr>\n",
       "<tr><td>H2O_cluster_allowed_cores:</td>\n",
       "<td>4</td></tr>\n",
       "<tr><td>H2O_cluster_status:</td>\n",
       "<td>locked, healthy</td></tr>\n",
       "<tr><td>H2O_connection_url:</td>\n",
       "<td>http://localhost:54321</td></tr>\n",
       "<tr><td>H2O_connection_proxy:</td>\n",
       "<td>{\"http\": null, \"https\": null}</td></tr>\n",
       "<tr><td>H2O_internal_security:</td>\n",
       "<td>False</td></tr>\n",
       "<tr><td>H2O_API_Extensions:</td>\n",
       "<td>Amazon S3, XGBoost, Algos, AutoML, Core V3, TargetEncoder, Core V4</td></tr>\n",
       "<tr><td>Python_version:</td>\n",
       "<td>3.6.4 final</td></tr></table></div>"
      ],
      "text/plain": [
       "--------------------------  ------------------------------------------------------------------\n",
       "H2O_cluster_uptime:         16 mins 15 secs\n",
       "H2O_cluster_timezone:       America/Los_Angeles\n",
       "H2O_data_parsing_timezone:  UTC\n",
       "H2O_cluster_version:        3.30.0.5\n",
       "H2O_cluster_version_age:    3 days\n",
       "H2O_cluster_name:           H2O_from_python_vibhz_c08o5s\n",
       "H2O_cluster_total_nodes:    1\n",
       "H2O_cluster_free_memory:    21.31 Gb\n",
       "H2O_cluster_total_cores:    8\n",
       "H2O_cluster_allowed_cores:  4\n",
       "H2O_cluster_status:         locked, healthy\n",
       "H2O_connection_url:         http://localhost:54321\n",
       "H2O_connection_proxy:       {\"http\": null, \"https\": null}\n",
       "H2O_internal_security:      False\n",
       "H2O_API_Extensions:         Amazon S3, XGBoost, Algos, AutoML, Core V3, TargetEncoder, Core V4\n",
       "Python_version:             3.6.4 final\n",
       "--------------------------  ------------------------------------------------------------------"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from h2o.estimators import H2OGradientBoostingEstimator\n",
    "h2o.init()\n",
    "predictors = [\"LotArea\",\"BsmtCond\"]\n",
    "response = \"SalePrice\"\n",
    "pros_gbm = H2OGradientBoostingEstimator(nfolds=5,\n",
    "                                        seed=1111,\n",
    "                                        keep_cross_validation_predictions = True)\n",
    "\n",
    "hf = h2o.H2OFrame(train)\n",
    "pros_gbm.train(x=predictors, y=response, training_frame=hf)\n",
    "perf = pros_gbm.model_performance()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "ModelMetricsRegression: gbm\n",
      "** Reported on train data. **\n",
      "\n",
      "MSE: 4084441269.728723\n",
      "RMSE: 63909.63362223823\n",
      "MAE: 45507.00314105308\n",
      "RMSLE: 0.3190212351541104\n",
      "Mean Residual Deviance: 4084441269.728723\n"
     ]
    },
    {
     "data": {
      "text/plain": []
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "perf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1459, 79)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.drop(['SalePrice'],axis=1).shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "hft = h2o.H2OFrame(test[[\"LotArea\",\"BsmtCond\"]])\n",
    "pred = pros_gbm.predict(hft)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<thead>\n",
       "<tr><th style=\"text-align: right;\">  predict</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "<tr><td style=\"text-align: right;\">   188364</td></tr>\n",
       "<tr><td style=\"text-align: right;\">   266134</td></tr>\n",
       "<tr><td style=\"text-align: right;\">   222987</td></tr>\n",
       "<tr><td style=\"text-align: right;\">   193894</td></tr>\n",
       "<tr><td style=\"text-align: right;\">   149318</td></tr>\n",
       "<tr><td style=\"text-align: right;\">   187593</td></tr>\n",
       "<tr><td style=\"text-align: right;\">   154544</td></tr>\n",
       "<tr><td style=\"text-align: right;\">   151957</td></tr>\n",
       "<tr><td style=\"text-align: right;\">   187294</td></tr>\n",
       "<tr><td style=\"text-align: right;\">   151957</td></tr>\n",
       "</tbody>\n",
       "</table>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": []
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1459, 1)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "dLpkDZACxQPg"
   },
   "source": [
    "## Converting year built into age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "N1gXV_QqxQPg"
   },
   "outputs": [],
   "source": [
    "currentYear = datetime.now().year"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "8oyuAeWlxQPi"
   },
   "source": [
    "* Converting a few columns such as Year Built and Year Remod added into the age as per current date. \n",
    "* The following columns make no contribution regarding the sales price ,so we can drop it. \n",
    "\n",
    " - MoSold : Month Sold (MM)\n",
    "\n",
    " - YrSold: Year Sold (YYYY)\n",
    "\n",
    " - SaleType: Type of sale\n",
    "\n",
    " - SaleCondition: Condition of sale\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "rldghXJhxQPj"
   },
   "outputs": [],
   "source": [
    "X_train['Age_House']=currentYear-X_train['YearBuilt']\n",
    "X_train['Age_Renovation']=currentYear-X_train['YearRemodAdd']\n",
    "X_train['Garage_age']=currentYear-X_train['GarageYrBlt']\n",
    "X_train = X_train.drop(['YearBuilt','YearRemodAdd','GarageYrBlt','MoSold','YrSold','SaleType','SaleCondition'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "mxF_vQm7xQPl"
   },
   "outputs": [],
   "source": [
    "X_test['Age_House']=currentYear-X_test['YearBuilt']\n",
    "X_test['Age_Renovation']=currentYear-X_test['YearRemodAdd']\n",
    "X_test['Garage_age']=currentYear-X_test['GarageYrBlt']\n",
    "X_test = X_test.drop(['YearBuilt','YearRemodAdd','GarageYrBlt','MoSold','YrSold','SaleType','SaleCondition'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "gpDN3uAaxQPo",
    "outputId": "c1ea95d1-021c-4695-988d-d30274061e50"
   },
   "outputs": [],
   "source": [
    "X_train['Age_House'].head()\n",
    "#X_train['Age_Renovation'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "orVqcC8exQPr",
    "outputId": "9e2fe53b-8a4b-4f38-da1e-c891bd33c43b"
   },
   "outputs": [],
   "source": [
    "X_train.GarageQual.isna().sum()\n",
    "#X_train.GarageFinish.isna().sum()\n",
    "#X_train.GarageFinish.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "0QbNvkomxQPt",
    "outputId": "2b05464b-badc-4218-c191-86c71d41e762"
   },
   "outputs": [],
   "source": [
    "X_train['BsmtQual'].isna().sum()\n",
    "#X_train['BsmtCond'].isna().sum()\n",
    "#X_train['BsmtExposure'].isna().sum()\n",
    "#X_train['BsmtFinType1'].isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "MTachzaNxQPv"
   },
   "source": [
    "* NA must be the houses with no garage as we have the same number of rows as NA where houses have a garage feature\n",
    "* NA must be the houses with no basement as we have the same number of rows as NA where houses have a garage feature\n",
    "* Replaced Garage age missing value with the mean of garage age value so we don't loose data; replacing these with the value of house age might lead to to downside effect in the case where houses are new and case where houses are old \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "uVKJXDQFxQPv"
   },
   "outputs": [],
   "source": [
    "#we can ignore D,E as they belong to a <1% decrease in dataset\n",
    "A = X_train.GarageType.value_counts().index[0]\n",
    "B = X_train.Electrical.value_counts().index[0]\n",
    "C = X_train['Garage_age'].mean\n",
    "D = X_train['MasVnrArea'].mean\n",
    "E = X_train.MasVnrType.value_counts().index[0]\n",
    "\n",
    "X_train['GarageQual']=X_train['GarageQual'].fillna('NA')\n",
    "X_train['GarageFinish']=X_train['GarageFinish'].fillna('NA')\n",
    "X_train['GarageCond']=X_train['GarageCond'].fillna('NA')\n",
    "\n",
    "X_train['GarageType']=X_train['GarageType'].fillna(A)\n",
    "X_train['Electrical']=X_train['Electrical'].fillna(B)\n",
    "X_train['Garage_age']=X_train['Garage_age'].fillna(C)\n",
    "X_train['MasVnrArea']=X_train['MasVnrArea'].fillna(D)\n",
    "X_train['MasVnrType']=X_train['MasVnrType'].fillna(E)\n",
    "\n",
    "X_train['BsmtQual']=X_train['BsmtQual'].fillna('NA')\n",
    "X_train['BsmtCond']=X_train['BsmtCond'].fillna('NA')\n",
    "X_train['BsmtExposure']=X_train['BsmtExposure'].fillna('NA')\n",
    "X_train['BsmtFinType1']=X_train['BsmtFinType1'].fillna('NA')\n",
    "X_train['BsmtFinType2']=X_train['BsmtFinType2'].fillna('NA')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "qmLW9VL5xQPx",
    "outputId": "3a668516-e214-4ff8-949e-b8cf90ab46c8"
   },
   "outputs": [],
   "source": [
    "X_train.MasVnrType.unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "sR7LcG0UxQP1"
   },
   "source": [
    "* This is the final step of cleaning the dataset. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Ee8k7W7qxQP1"
   },
   "source": [
    "### Applying the same step to the test set so we have clean test set. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "UdzMY9gjxQP2"
   },
   "outputs": [],
   "source": [
    "X_test['GarageQual']=X_test['GarageQual'].fillna('NA')\n",
    "X_test['GarageFinish']=X_test['GarageFinish'].fillna('NA')\n",
    "X_test['GarageCond']=X_test['GarageCond'].fillna('NA')\n",
    "\n",
    "X_test['GarageType']=X_test['GarageType'].fillna(A)\n",
    "X_test['Electrical']=X_test['Electrical'].fillna(B)\n",
    "X_test['Garage_age']=X_test['Garage_age'].fillna(C)\n",
    "X_test['MasVnrArea']=X_test['MasVnrArea'].fillna(D)\n",
    "X_test['MasVnrType']=X_test['MasVnrType'].fillna(E)\n",
    "\n",
    "X_test['BsmtQual']=X_test['BsmtQual'].fillna('NA')\n",
    "X_test['BsmtCond']=X_test['BsmtCond'].fillna('NA')\n",
    "X_test['BsmtExposure']=X_test['BsmtExposure'].fillna('NA')\n",
    "X_test['BsmtFinType1']=X_test['BsmtFinType1'].fillna('NA')\n",
    "X_test['BsmtFinType2']=X_test['BsmtFinType2'].fillna('NA')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "AyZcyG9WxQP5",
    "outputId": "5df2bbe8-6e43-447c-d5c9-5fffabaff39a"
   },
   "outputs": [],
   "source": [
    "pd.DataFrame(X_test.isna().sum()*100/X_test.shape[0]).plot.bar(figsize=(20,5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "09hv4L-AxQP7"
   },
   "outputs": [],
   "source": [
    "#construction new values to replace the missing values. \n",
    "F = X_train.MSZoning.value_counts().index[0]\n",
    "G = X_train.Utilities.value_counts().index[0]\n",
    "H = X_train.Exterior1st.value_counts().index[0]\n",
    "I = X_train.Exterior2nd.value_counts().index[0]\n",
    "J = X_train['BsmtFinSF1'].mean()\n",
    "K = X_train['BsmtFinSF2'].mean()\n",
    "L = X_train['TotalBsmtSF'].mean()\n",
    "M = X_train.BsmtFullBath.value_counts().index[0]\n",
    "N = X_train.BsmtHalfBath.value_counts().index[0]\n",
    "O = X_train.KitchenQual.value_counts().index[0]\n",
    "P = X_train.Functional.value_counts().index[0]\n",
    "Q = int(X_train.GarageCars.value_counts().index[0])\n",
    "R = X_train['GarageArea'].mean()\n",
    "S = X_train['BsmtUnfSF'].mean()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "GJPuFt0hxQP9"
   },
   "outputs": [],
   "source": [
    "X_test['MSZoning']=X_test['MSZoning'].fillna(F)\n",
    "X_test['Utilities']=X_test['Utilities'].fillna(G)\n",
    "X_test['Exterior1st']=X_test['Exterior1st'].fillna(H)\n",
    "X_test['Exterior2nd']=X_test['Exterior2nd'].fillna(I)\n",
    "X_test['BsmtFinSF1']=X_test['BsmtFinSF1'].fillna(J)\n",
    "X_test['BsmtFinSF2']=X_test['BsmtFinSF2'].fillna(K)\n",
    "X_test['TotalBsmtSF']=X_test['TotalBsmtSF'].fillna(L)\n",
    "X_test['BsmtFullBath']=X_test['BsmtFullBath'].fillna(M)\n",
    "X_test['BsmtHalfBath']=X_test['BsmtHalfBath'].fillna(N)\n",
    "X_test['KitchenQual']=X_test['KitchenQual'].fillna(O)\n",
    "X_test['Functional']=X_test['Functional'].fillna(P)\n",
    "X_test['GarageCars']=X_test['GarageCars'].fillna(Q)\n",
    "X_test['GarageArea']=X_test['GarageArea'].fillna(R)\n",
    "X_test['BsmtUnfSF']=X_test['BsmtUnfSF'].fillna(S)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "AL32tU9bxQP_",
    "outputId": "87c5defd-0bc6-4ecd-8b0d-5cd2d41be50f"
   },
   "outputs": [],
   "source": [
    "pd.DataFrame(X_train.isna().sum()*100/X_train.shape[0]).plot.bar(figsize=(20,5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "dhu7ivpHxQQB",
    "outputId": "f73bd4d4-a7e8-4a2b-bc60-481906e6b105"
   },
   "outputs": [],
   "source": [
    "pd.DataFrame(X_test.isna().sum()*100/X_test.shape[0]).plot.bar(figsize=(20,5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "P5n_jOoFxQQD",
    "outputId": "9f350799-abf8-4723-bbf1-de8278aeab5c"
   },
   "outputs": [],
   "source": [
    "pd.DataFrame(X_train.isna().sum()).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "MUjB_6QwxQQF",
    "outputId": "98373c8e-65be-48b7-de64-fb8cd21b9657"
   },
   "outputs": [],
   "source": [
    "pd.DataFrame(X_train.isna().sum()).sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "hXNaW_XwxQQH"
   },
   "source": [
    "#### We can see that the test/train set has no null values, we can start EDA and model training. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "KpUeb7yDxQQI"
   },
   "source": [
    "# EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "7eWLHz9jxQQI",
    "outputId": "9e866e6b-ee15-4c5a-bf71-2798f0fd32bd"
   },
   "outputs": [],
   "source": [
    "result = pd.concat([X_train, Y_train], axis=1)\n",
    "Corr = result.corr().iloc[:-1,-1]\n",
    "\n",
    "fig, ax_ = plt.subplots(figsize=(8, 10))\n",
    "_ =  Corr.plot(kind='barh', ax=ax_, colormap='gnuplot')\n",
    "_ = ax_.set_xlabel('Pearson Correlation for continuous variables')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "4KayAdDExQQK"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [
    "hXNaW_XwxQQH"
   ],
   "machine_shape": "hm",
   "name": "EDA01.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
